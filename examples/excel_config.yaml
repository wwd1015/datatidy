# Excel Processing Example
# Demonstrates processing Excel files with multiple sheets and complex formatting

input:
  type: excel
  source:
    path: "examples/sales_data.xlsx"
    sheet_name: "Sales_Q1_2024"
    options:
      header: 1          # Use second row as header
      skiprows: [0]      # Skip first row
      usecols: "A:J"     # Only read columns A through J
      na_values: ["N/A", "NULL", "-", ""]

output:
  columns:
    transaction_id:
      source: "Trans_ID"
      type: string
      validation:
        required: true
        pattern: "^TXN-\\d{6}$"

    sale_date:
      source: "Sale_Date"
      type: datetime
      format: "%Y-%m-%d"
      validation:
        required: true

    customer_name:
      source: "Customer"
      type: string
      transformation: "str.strip().title()"
      validation:
        required: true
        min_length: 2
        max_length: 100

    product_category:
      source: "Category"
      type: string
      transformation: "str.strip().upper().replace('_', ' ')"
      validation:
        allowed_values: ["ELECTRONICS", "CLOTHING", "BOOKS", "HOME & GARDEN", "SPORTS"]

    product_name:
      source: "Product"
      type: string
      transformation: "str.strip().title()"
      validation:
        required: true
        max_length: 200

    quantity:
      source: "Qty"
      type: int
      validation:
        required: true
        min_value: 1
        max_value: 1000

    unit_price:
      source: "Price"
      type: float
      validation:
        required: true
        min_value: 0.01
        max_value: 10000.00

    total_amount:
      transformation: "quantity * unit_price"
      type: float
      validation:
        min_value: 0.01

    discount_percent:
      source: "Discount"
      type: float
      default: 0.0
      validation:
        min_value: 0.0
        max_value: 50.0

    final_amount:
      transformation: "total_amount * (1 - discount_percent / 100)"
      type: float

    sales_rep:
      source: "Rep"
      type: string
      transformation: "str.strip().title()"
      default: "Unassigned"

    region:
      source: "Region"
      type: string
      transformation: "str.strip().upper()"
      validation:
        allowed_values: ["NORTH", "SOUTH", "EAST", "WEST", "CENTRAL"]

    revenue_tier:
      transformation: |
        'premium' if final_amount > 1000 else (
          'standard' if final_amount > 100 else 'basic'
        )
      type: string
      validation:
        allowed_values: ["premium", "standard", "basic"]

    quarter:
      transformation: "f'Q{((pd.to_datetime(sale_date).month - 1) // 3) + 1}'"
      type: string

    month_name:
      transformation: "pd.to_datetime(sale_date).strftime('%B')"
      type: string

  # Filter out invalid or test transactions
  filters:
    - condition: "final_amount > 0"
      action: keep
    - condition: "not customer_name.str.contains('TEST', case=False, na=False)"
      action: keep
    - condition: "quantity > 0"
      action: keep

  # Sort by date and amount
  sort:
    - column: sale_date
      ascending: true
    - column: final_amount
      ascending: false

global_settings:
  ignore_errors: false
  max_errors: 25
  encoding: utf-8